
LAB5_Exercise.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027e8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080028f4  080028f4  000128f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002920  08002920  00020028  2**0
                  CONTENTS
  4 .ARM          00000000  08002920  08002920  00020028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002920  08002920  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002920  08002920  00012920  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002924  08002924  00012924  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  08002928  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000028  08002950  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08002950  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009204  00000000  00000000  00020051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000189c  00000000  00000000  00029255  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  0002aaf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000720  00000000  00000000  0002b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001658f  00000000  00000000  0002b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009674  00000000  00000000  00041f5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000810a8  00000000  00000000  0004b5d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cc67b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e18  00000000  00000000  000cc6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000028 	.word	0x20000028
 8000128:	00000000 	.word	0x00000000
 800012c:	080028dc 	.word	0x080028dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000002c 	.word	0x2000002c
 8000148:	080028dc 	.word	0x080028dc

0800014c <HAL_UART_RxCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t temp = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, rx_data, 6, 10);
 8000154:	230a      	movs	r3, #10
 8000156:	2206      	movs	r2, #6
 8000158:	4903      	ldr	r1, [pc, #12]	; (8000168 <HAL_UART_RxCpltCallback+0x1c>)
 800015a:	4804      	ldr	r0, [pc, #16]	; (800016c <HAL_UART_RxCpltCallback+0x20>)
 800015c:	f001 fd78 	bl	8001c50 <HAL_UART_Transmit>
}
 8000160:	bf00      	nop
 8000162:	3708      	adds	r7, #8
 8000164:	46bd      	mov	sp, r7
 8000166:	bd80      	pop	{r7, pc}
 8000168:	200000dc 	.word	0x200000dc
 800016c:	200000e0 	.word	0x200000e0

08000170 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fa47 	bl	8000608 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f82b 	bl	80001d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f8e1 	bl	8000344 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000182:	f000 f877 	bl	8000274 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000186:	f000 f8b3 	bl	80002f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_data, 6);
 800018a:	2206      	movs	r2, #6
 800018c:	490c      	ldr	r1, [pc, #48]	; (80001c0 <main+0x50>)
 800018e:	480d      	ldr	r0, [pc, #52]	; (80001c4 <main+0x54>)
 8000190:	f001 fde9 	bl	8001d66 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t ADC_value = 0;
 8000194:	2300      	movs	r3, #0
 8000196:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8000198:	2120      	movs	r1, #32
 800019a:	480b      	ldr	r0, [pc, #44]	; (80001c8 <main+0x58>)
 800019c:	f001 f82a 	bl	80011f4 <HAL_GPIO_TogglePin>
	  ADC_value = HAL_ADC_GetValue(&hadc1);
 80001a0:	480a      	ldr	r0, [pc, #40]	; (80001cc <main+0x5c>)
 80001a2:	f000 fb8f 	bl	80008c4 <HAL_ADC_GetValue>
 80001a6:	6078      	str	r0, [r7, #4]
	  HAL_UART_Transmit(&huart2, tx_buffer, 27, 10);
 80001a8:	230a      	movs	r3, #10
 80001aa:	221b      	movs	r2, #27
 80001ac:	4908      	ldr	r1, [pc, #32]	; (80001d0 <main+0x60>)
 80001ae:	4805      	ldr	r0, [pc, #20]	; (80001c4 <main+0x54>)
 80001b0:	f001 fd4e 	bl	8001c50 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80001b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80001b8:	f000 fa88 	bl	80006cc <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80001bc:	e7ec      	b.n	8000198 <main+0x28>
 80001be:	bf00      	nop
 80001c0:	200000dc 	.word	0x200000dc
 80001c4:	200000e0 	.word	0x200000e0
 80001c8:	40010800 	.word	0x40010800
 80001cc:	200000ac 	.word	0x200000ac
 80001d0:	20000000 	.word	0x20000000

080001d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b094      	sub	sp, #80	; 0x50
 80001d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001de:	2228      	movs	r2, #40	; 0x28
 80001e0:	2100      	movs	r1, #0
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 fb72 	bl	80028cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001e8:	f107 0314 	add.w	r3, r7, #20
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
 80001f0:	605a      	str	r2, [r3, #4]
 80001f2:	609a      	str	r2, [r3, #8]
 80001f4:	60da      	str	r2, [r3, #12]
 80001f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	2200      	movs	r2, #0
 80001fc:	601a      	str	r2, [r3, #0]
 80001fe:	605a      	str	r2, [r3, #4]
 8000200:	609a      	str	r2, [r3, #8]
 8000202:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000204:	2302      	movs	r3, #2
 8000206:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000208:	2301      	movs	r3, #1
 800020a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800020c:	2310      	movs	r3, #16
 800020e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000210:	2300      	movs	r3, #0
 8000212:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000218:	4618      	mov	r0, r3
 800021a:	f001 f805 	bl	8001228 <HAL_RCC_OscConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000224:	f000 f8cc 	bl	80003c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	230f      	movs	r3, #15
 800022a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800022c:	2300      	movs	r3, #0
 800022e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000230:	2300      	movs	r3, #0
 8000232:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800023c:	f107 0314 	add.w	r3, r7, #20
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f001 fa70 	bl	8001728 <HAL_RCC_ClockConfig>
 8000248:	4603      	mov	r3, r0
 800024a:	2b00      	cmp	r3, #0
 800024c:	d001      	beq.n	8000252 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800024e:	f000 f8b7 	bl	80003c0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000252:	2302      	movs	r3, #2
 8000254:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 8000256:	2300      	movs	r3, #0
 8000258:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f001 fbf1 	bl	8001a44 <HAL_RCCEx_PeriphCLKConfig>
 8000262:	4603      	mov	r3, r0
 8000264:	2b00      	cmp	r3, #0
 8000266:	d001      	beq.n	800026c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000268:	f000 f8aa 	bl	80003c0 <Error_Handler>
  }
}
 800026c:	bf00      	nop
 800026e:	3750      	adds	r7, #80	; 0x50
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	2200      	movs	r2, #0
 800027e:	601a      	str	r2, [r3, #0]
 8000280:	605a      	str	r2, [r3, #4]
 8000282:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000284:	4b18      	ldr	r3, [pc, #96]	; (80002e8 <MX_ADC1_Init+0x74>)
 8000286:	4a19      	ldr	r2, [pc, #100]	; (80002ec <MX_ADC1_Init+0x78>)
 8000288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800028a:	4b17      	ldr	r3, [pc, #92]	; (80002e8 <MX_ADC1_Init+0x74>)
 800028c:	2200      	movs	r2, #0
 800028e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000290:	4b15      	ldr	r3, [pc, #84]	; (80002e8 <MX_ADC1_Init+0x74>)
 8000292:	2201      	movs	r2, #1
 8000294:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000296:	4b14      	ldr	r3, [pc, #80]	; (80002e8 <MX_ADC1_Init+0x74>)
 8000298:	2200      	movs	r2, #0
 800029a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800029c:	4b12      	ldr	r3, [pc, #72]	; (80002e8 <MX_ADC1_Init+0x74>)
 800029e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002a2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002a4:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80002aa:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002ac:	2201      	movs	r2, #1
 80002ae:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002b0:	480d      	ldr	r0, [pc, #52]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002b2:	f000 fa2f 	bl	8000714 <HAL_ADC_Init>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d001      	beq.n	80002c0 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80002bc:	f000 f880 	bl	80003c0 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80002c0:	2300      	movs	r3, #0
 80002c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002c4:	2301      	movs	r3, #1
 80002c6:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	4619      	mov	r1, r3
 80002d0:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_ADC1_Init+0x74>)
 80002d2:	f000 fb03 	bl	80008dc <HAL_ADC_ConfigChannel>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d001      	beq.n	80002e0 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80002dc:	f000 f870 	bl	80003c0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80002e0:	bf00      	nop
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	200000ac 	.word	0x200000ac
 80002ec:	40012400 	.word	0x40012400

080002f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002f4:	4b11      	ldr	r3, [pc, #68]	; (800033c <MX_USART2_UART_Init+0x4c>)
 80002f6:	4a12      	ldr	r2, [pc, #72]	; (8000340 <MX_USART2_UART_Init+0x50>)
 80002f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <MX_USART2_UART_Init+0x4c>)
 80002fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000300:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000302:	4b0e      	ldr	r3, [pc, #56]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <MX_USART2_UART_Init+0x4c>)
 800030a:	2200      	movs	r2, #0
 800030c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800030e:	4b0b      	ldr	r3, [pc, #44]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000310:	2200      	movs	r2, #0
 8000312:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000314:	4b09      	ldr	r3, [pc, #36]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000316:	220c      	movs	r2, #12
 8000318:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800031a:	4b08      	ldr	r3, [pc, #32]	; (800033c <MX_USART2_UART_Init+0x4c>)
 800031c:	2200      	movs	r2, #0
 800031e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000322:	2200      	movs	r2, #0
 8000324:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_USART2_UART_Init+0x4c>)
 8000328:	f001 fc42 	bl	8001bb0 <HAL_UART_Init>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000332:	f000 f845 	bl	80003c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	200000e0 	.word	0x200000e0
 8000340:	40004400 	.word	0x40004400

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b17      	ldr	r3, [pc, #92]	; (80003b8 <MX_GPIO_Init+0x74>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a16      	ldr	r2, [pc, #88]	; (80003b8 <MX_GPIO_Init+0x74>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b14      	ldr	r3, [pc, #80]	; (80003b8 <MX_GPIO_Init+0x74>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	2120      	movs	r1, #32
 8000374:	4811      	ldr	r0, [pc, #68]	; (80003bc <MX_GPIO_Init+0x78>)
 8000376:	f000 ff25 	bl	80011c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 800037a:	2320      	movs	r3, #32
 800037c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037e:	2301      	movs	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000386:	2302      	movs	r3, #2
 8000388:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 800038a:	f107 0308 	add.w	r3, r7, #8
 800038e:	4619      	mov	r1, r3
 8000390:	480a      	ldr	r0, [pc, #40]	; (80003bc <MX_GPIO_Init+0x78>)
 8000392:	f000 fd9d 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000396:	2340      	movs	r3, #64	; 0x40
 8000398:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800039a:	2302      	movs	r3, #2
 800039c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039e:	2302      	movs	r3, #2
 80003a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a2:	f107 0308 	add.w	r3, r7, #8
 80003a6:	4619      	mov	r1, r3
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <MX_GPIO_Init+0x78>)
 80003aa:	f000 fd91 	bl	8000ed0 <HAL_GPIO_Init>

}
 80003ae:	bf00      	nop
 80003b0:	3718      	adds	r7, #24
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000
 80003bc:	40010800 	.word	0x40010800

080003c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c4:	b672      	cpsid	i
}
 80003c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c8:	e7fe      	b.n	80003c8 <Error_Handler+0x8>
	...

080003cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003d2:	4b15      	ldr	r3, [pc, #84]	; (8000428 <HAL_MspInit+0x5c>)
 80003d4:	699b      	ldr	r3, [r3, #24]
 80003d6:	4a14      	ldr	r2, [pc, #80]	; (8000428 <HAL_MspInit+0x5c>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6193      	str	r3, [r2, #24]
 80003de:	4b12      	ldr	r3, [pc, #72]	; (8000428 <HAL_MspInit+0x5c>)
 80003e0:	699b      	ldr	r3, [r3, #24]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	60bb      	str	r3, [r7, #8]
 80003e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003ea:	4b0f      	ldr	r3, [pc, #60]	; (8000428 <HAL_MspInit+0x5c>)
 80003ec:	69db      	ldr	r3, [r3, #28]
 80003ee:	4a0e      	ldr	r2, [pc, #56]	; (8000428 <HAL_MspInit+0x5c>)
 80003f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f4:	61d3      	str	r3, [r2, #28]
 80003f6:	4b0c      	ldr	r3, [pc, #48]	; (8000428 <HAL_MspInit+0x5c>)
 80003f8:	69db      	ldr	r3, [r3, #28]
 80003fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fe:	607b      	str	r3, [r7, #4]
 8000400:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000402:	4b0a      	ldr	r3, [pc, #40]	; (800042c <HAL_MspInit+0x60>)
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	4a04      	ldr	r2, [pc, #16]	; (800042c <HAL_MspInit+0x60>)
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800041e:	bf00      	nop
 8000420:	3714      	adds	r7, #20
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000
 800042c:	40010000 	.word	0x40010000

08000430 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	4a14      	ldr	r2, [pc, #80]	; (800049c <HAL_ADC_MspInit+0x6c>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d121      	bne.n	8000494 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <HAL_ADC_MspInit+0x70>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a12      	ldr	r2, [pc, #72]	; (80004a0 <HAL_ADC_MspInit+0x70>)
 8000456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b10      	ldr	r3, [pc, #64]	; (80004a0 <HAL_ADC_MspInit+0x70>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000464:	60fb      	str	r3, [r7, #12]
 8000466:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <HAL_ADC_MspInit+0x70>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a0c      	ldr	r2, [pc, #48]	; (80004a0 <HAL_ADC_MspInit+0x70>)
 800046e:	f043 0304 	orr.w	r3, r3, #4
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b0a      	ldr	r3, [pc, #40]	; (80004a0 <HAL_ADC_MspInit+0x70>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f003 0304 	and.w	r3, r3, #4
 800047c:	60bb      	str	r3, [r7, #8]
 800047e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000480:	2301      	movs	r3, #1
 8000482:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000484:	2303      	movs	r3, #3
 8000486:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000488:	f107 0310 	add.w	r3, r7, #16
 800048c:	4619      	mov	r1, r3
 800048e:	4805      	ldr	r0, [pc, #20]	; (80004a4 <HAL_ADC_MspInit+0x74>)
 8000490:	f000 fd1e 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000494:	bf00      	nop
 8000496:	3720      	adds	r7, #32
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	40012400 	.word	0x40012400
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40010800 	.word	0x40010800

080004a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b088      	sub	sp, #32
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 0310 	add.w	r3, r7, #16
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	4a1f      	ldr	r2, [pc, #124]	; (8000540 <HAL_UART_MspInit+0x98>)
 80004c4:	4293      	cmp	r3, r2
 80004c6:	d137      	bne.n	8000538 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80004c8:	4b1e      	ldr	r3, [pc, #120]	; (8000544 <HAL_UART_MspInit+0x9c>)
 80004ca:	69db      	ldr	r3, [r3, #28]
 80004cc:	4a1d      	ldr	r2, [pc, #116]	; (8000544 <HAL_UART_MspInit+0x9c>)
 80004ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004d2:	61d3      	str	r3, [r2, #28]
 80004d4:	4b1b      	ldr	r3, [pc, #108]	; (8000544 <HAL_UART_MspInit+0x9c>)
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004dc:	60fb      	str	r3, [r7, #12]
 80004de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004e0:	4b18      	ldr	r3, [pc, #96]	; (8000544 <HAL_UART_MspInit+0x9c>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a17      	ldr	r2, [pc, #92]	; (8000544 <HAL_UART_MspInit+0x9c>)
 80004e6:	f043 0304 	orr.w	r3, r3, #4
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b15      	ldr	r3, [pc, #84]	; (8000544 <HAL_UART_MspInit+0x9c>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0304 	and.w	r3, r3, #4
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80004f8:	2304      	movs	r3, #4
 80004fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004fc:	2302      	movs	r3, #2
 80004fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000500:	2303      	movs	r3, #3
 8000502:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	f107 0310 	add.w	r3, r7, #16
 8000508:	4619      	mov	r1, r3
 800050a:	480f      	ldr	r0, [pc, #60]	; (8000548 <HAL_UART_MspInit+0xa0>)
 800050c:	f000 fce0 	bl	8000ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000510:	2308      	movs	r3, #8
 8000512:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000518:	2300      	movs	r3, #0
 800051a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800051c:	f107 0310 	add.w	r3, r7, #16
 8000520:	4619      	mov	r1, r3
 8000522:	4809      	ldr	r0, [pc, #36]	; (8000548 <HAL_UART_MspInit+0xa0>)
 8000524:	f000 fcd4 	bl	8000ed0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000528:	2200      	movs	r2, #0
 800052a:	2100      	movs	r1, #0
 800052c:	2026      	movs	r0, #38	; 0x26
 800052e:	f000 fbe6 	bl	8000cfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000532:	2026      	movs	r0, #38	; 0x26
 8000534:	f000 fbff 	bl	8000d36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000538:	bf00      	nop
 800053a:	3720      	adds	r7, #32
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	40004400 	.word	0x40004400
 8000544:	40021000 	.word	0x40021000
 8000548:	40010800 	.word	0x40010800

0800054c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <NMI_Handler+0x4>

08000552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <HardFault_Handler+0x4>

08000558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <MemManage_Handler+0x4>

0800055e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000562:	e7fe      	b.n	8000562 <BusFault_Handler+0x4>

08000564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000568:	e7fe      	b.n	8000568 <UsageFault_Handler+0x4>

0800056a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800056a:	b480      	push	{r7}
 800056c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800056e:	bf00      	nop
 8000570:	46bd      	mov	sp, r7
 8000572:	bc80      	pop	{r7}
 8000574:	4770      	bx	lr

08000576 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000576:	b480      	push	{r7}
 8000578:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800057a:	bf00      	nop
 800057c:	46bd      	mov	sp, r7
 800057e:	bc80      	pop	{r7}
 8000580:	4770      	bx	lr

08000582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000582:	b480      	push	{r7}
 8000584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000586:	bf00      	nop
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr

0800058e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058e:	b580      	push	{r7, lr}
 8000590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000592:	f000 f87f 	bl	8000694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000596:	bf00      	nop
 8000598:	bd80      	pop	{r7, pc}
	...

0800059c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80005a0:	4802      	ldr	r0, [pc, #8]	; (80005ac <USART2_IRQHandler+0x10>)
 80005a2:	f001 fc05 	bl	8001db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000e0 	.word	0x200000e0

080005b0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bc80      	pop	{r7}
 80005ba:	4770      	bx	lr

080005bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005bc:	f7ff fff8 	bl	80005b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c0:	480b      	ldr	r0, [pc, #44]	; (80005f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005c2:	490c      	ldr	r1, [pc, #48]	; (80005f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005c4:	4a0c      	ldr	r2, [pc, #48]	; (80005f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005c8:	e002      	b.n	80005d0 <LoopCopyDataInit>

080005ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005ce:	3304      	adds	r3, #4

080005d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d4:	d3f9      	bcc.n	80005ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005d6:	4a09      	ldr	r2, [pc, #36]	; (80005fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005d8:	4c09      	ldr	r4, [pc, #36]	; (8000600 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005dc:	e001      	b.n	80005e2 <LoopFillZerobss>

080005de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e0:	3204      	adds	r2, #4

080005e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e4:	d3fb      	bcc.n	80005de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005e6:	f002 f94d 	bl	8002884 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ea:	f7ff fdc1 	bl	8000170 <main>
  bx lr
 80005ee:	4770      	bx	lr
  ldr r0, =_sdata
 80005f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005f4:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80005f8:	08002928 	.word	0x08002928
  ldr r2, =_sbss
 80005fc:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000600:	2000012c 	.word	0x2000012c

08000604 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000604:	e7fe      	b.n	8000604 <ADC1_2_IRQHandler>
	...

08000608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800060c:	4b08      	ldr	r3, [pc, #32]	; (8000630 <HAL_Init+0x28>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a07      	ldr	r2, [pc, #28]	; (8000630 <HAL_Init+0x28>)
 8000612:	f043 0310 	orr.w	r3, r3, #16
 8000616:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000618:	2003      	movs	r0, #3
 800061a:	f000 fb65 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800061e:	200f      	movs	r0, #15
 8000620:	f000 f808 	bl	8000634 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000624:	f7ff fed2 	bl	80003cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40022000 	.word	0x40022000

08000634 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b082      	sub	sp, #8
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <HAL_InitTick+0x54>)
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <HAL_InitTick+0x58>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	4619      	mov	r1, r3
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	fbb3 f3f1 	udiv	r3, r3, r1
 800064e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fb7d 	bl	8000d52 <HAL_SYSTICK_Config>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e00e      	b.n	8000680 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	2b0f      	cmp	r3, #15
 8000666:	d80a      	bhi.n	800067e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000668:	2200      	movs	r2, #0
 800066a:	6879      	ldr	r1, [r7, #4]
 800066c:	f04f 30ff 	mov.w	r0, #4294967295
 8000670:	f000 fb45 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000674:	4a06      	ldr	r2, [pc, #24]	; (8000690 <HAL_InitTick+0x5c>)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800067a:	2300      	movs	r3, #0
 800067c:	e000      	b.n	8000680 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800067e:	2301      	movs	r3, #1
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	2000001c 	.word	0x2000001c
 800068c:	20000024 	.word	0x20000024
 8000690:	20000020 	.word	0x20000020

08000694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <HAL_IncTick+0x1c>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <HAL_IncTick+0x20>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4413      	add	r3, r2
 80006a4:	4a03      	ldr	r2, [pc, #12]	; (80006b4 <HAL_IncTick+0x20>)
 80006a6:	6013      	str	r3, [r2, #0]
}
 80006a8:	bf00      	nop
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	20000024 	.word	0x20000024
 80006b4:	20000128 	.word	0x20000128

080006b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  return uwTick;
 80006bc:	4b02      	ldr	r3, [pc, #8]	; (80006c8 <HAL_GetTick+0x10>)
 80006be:	681b      	ldr	r3, [r3, #0]
}
 80006c0:	4618      	mov	r0, r3
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr
 80006c8:	20000128 	.word	0x20000128

080006cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006d4:	f7ff fff0 	bl	80006b8 <HAL_GetTick>
 80006d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006e4:	d005      	beq.n	80006f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <HAL_Delay+0x44>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	4413      	add	r3, r2
 80006f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006f2:	bf00      	nop
 80006f4:	f7ff ffe0 	bl	80006b8 <HAL_GetTick>
 80006f8:	4602      	mov	r2, r0
 80006fa:	68bb      	ldr	r3, [r7, #8]
 80006fc:	1ad3      	subs	r3, r2, r3
 80006fe:	68fa      	ldr	r2, [r7, #12]
 8000700:	429a      	cmp	r2, r3
 8000702:	d8f7      	bhi.n	80006f4 <HAL_Delay+0x28>
  {
  }
}
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000024 	.word	0x20000024

08000714 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800071c:	2300      	movs	r3, #0
 800071e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000728:	2300      	movs	r3, #0
 800072a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d101      	bne.n	8000736 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000732:	2301      	movs	r3, #1
 8000734:	e0be      	b.n	80008b4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000740:	2b00      	cmp	r3, #0
 8000742:	d109      	bne.n	8000758 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	2200      	movs	r2, #0
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2200      	movs	r2, #0
 800074e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000752:	6878      	ldr	r0, [r7, #4]
 8000754:	f7ff fe6c 	bl	8000430 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f000 f9b7 	bl	8000acc <ADC_ConversionStop_Disable>
 800075e:	4603      	mov	r3, r0
 8000760:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000766:	f003 0310 	and.w	r3, r3, #16
 800076a:	2b00      	cmp	r3, #0
 800076c:	f040 8099 	bne.w	80008a2 <HAL_ADC_Init+0x18e>
 8000770:	7dfb      	ldrb	r3, [r7, #23]
 8000772:	2b00      	cmp	r3, #0
 8000774:	f040 8095 	bne.w	80008a2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800077c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000780:	f023 0302 	bic.w	r3, r3, #2
 8000784:	f043 0202 	orr.w	r2, r3, #2
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000794:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	7b1b      	ldrb	r3, [r3, #12]
 800079a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800079c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800079e:	68ba      	ldr	r2, [r7, #8]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80007ac:	d003      	beq.n	80007b6 <HAL_ADC_Init+0xa2>
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d102      	bne.n	80007bc <HAL_ADC_Init+0xa8>
 80007b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007ba:	e000      	b.n	80007be <HAL_ADC_Init+0xaa>
 80007bc:	2300      	movs	r3, #0
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	4313      	orrs	r3, r2
 80007c2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	7d1b      	ldrb	r3, [r3, #20]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d119      	bne.n	8000800 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	7b1b      	ldrb	r3, [r3, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d109      	bne.n	80007e8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	699b      	ldr	r3, [r3, #24]
 80007d8:	3b01      	subs	r3, #1
 80007da:	035a      	lsls	r2, r3, #13
 80007dc:	693b      	ldr	r3, [r7, #16]
 80007de:	4313      	orrs	r3, r2
 80007e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007e4:	613b      	str	r3, [r7, #16]
 80007e6:	e00b      	b.n	8000800 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ec:	f043 0220 	orr.w	r2, r3, #32
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f8:	f043 0201 	orr.w	r2, r3, #1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	693a      	ldr	r2, [r7, #16]
 8000810:	430a      	orrs	r2, r1
 8000812:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	689a      	ldr	r2, [r3, #8]
 800081a:	4b28      	ldr	r3, [pc, #160]	; (80008bc <HAL_ADC_Init+0x1a8>)
 800081c:	4013      	ands	r3, r2
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	6812      	ldr	r2, [r2, #0]
 8000822:	68b9      	ldr	r1, [r7, #8]
 8000824:	430b      	orrs	r3, r1
 8000826:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000830:	d003      	beq.n	800083a <HAL_ADC_Init+0x126>
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d104      	bne.n	8000844 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	691b      	ldr	r3, [r3, #16]
 800083e:	3b01      	subs	r3, #1
 8000840:	051b      	lsls	r3, r3, #20
 8000842:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800084a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	430a      	orrs	r2, r1
 8000856:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	689a      	ldr	r2, [r3, #8]
 800085e:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <HAL_ADC_Init+0x1ac>)
 8000860:	4013      	ands	r3, r2
 8000862:	68ba      	ldr	r2, [r7, #8]
 8000864:	429a      	cmp	r2, r3
 8000866:	d10b      	bne.n	8000880 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2200      	movs	r2, #0
 800086c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000872:	f023 0303 	bic.w	r3, r3, #3
 8000876:	f043 0201 	orr.w	r2, r3, #1
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800087e:	e018      	b.n	80008b2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000884:	f023 0312 	bic.w	r3, r3, #18
 8000888:	f043 0210 	orr.w	r2, r3, #16
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000894:	f043 0201 	orr.w	r2, r3, #1
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80008a0:	e007      	b.n	80008b2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80008a6:	f043 0210 	orr.w	r2, r3, #16
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80008ae:	2301      	movs	r3, #1
 80008b0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80008b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	ffe1f7fd 	.word	0xffe1f7fd
 80008c0:	ff1f0efe 	.word	0xff1f0efe

080008c4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr

080008dc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008e6:	2300      	movs	r3, #0
 80008e8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d101      	bne.n	80008fc <HAL_ADC_ConfigChannel+0x20>
 80008f8:	2302      	movs	r3, #2
 80008fa:	e0dc      	b.n	8000ab6 <HAL_ADC_ConfigChannel+0x1da>
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2201      	movs	r2, #1
 8000900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	685b      	ldr	r3, [r3, #4]
 8000908:	2b06      	cmp	r3, #6
 800090a:	d81c      	bhi.n	8000946 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685a      	ldr	r2, [r3, #4]
 8000916:	4613      	mov	r3, r2
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	4413      	add	r3, r2
 800091c:	3b05      	subs	r3, #5
 800091e:	221f      	movs	r2, #31
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	43db      	mvns	r3, r3
 8000926:	4019      	ands	r1, r3
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	4613      	mov	r3, r2
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4413      	add	r3, r2
 8000936:	3b05      	subs	r3, #5
 8000938:	fa00 f203 	lsl.w	r2, r0, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	430a      	orrs	r2, r1
 8000942:	635a      	str	r2, [r3, #52]	; 0x34
 8000944:	e03c      	b.n	80009c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	2b0c      	cmp	r3, #12
 800094c:	d81c      	bhi.n	8000988 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	4613      	mov	r3, r2
 800095a:	009b      	lsls	r3, r3, #2
 800095c:	4413      	add	r3, r2
 800095e:	3b23      	subs	r3, #35	; 0x23
 8000960:	221f      	movs	r2, #31
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	43db      	mvns	r3, r3
 8000968:	4019      	ands	r1, r3
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	6818      	ldr	r0, [r3, #0]
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685a      	ldr	r2, [r3, #4]
 8000972:	4613      	mov	r3, r2
 8000974:	009b      	lsls	r3, r3, #2
 8000976:	4413      	add	r3, r2
 8000978:	3b23      	subs	r3, #35	; 0x23
 800097a:	fa00 f203 	lsl.w	r2, r0, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	430a      	orrs	r2, r1
 8000984:	631a      	str	r2, [r3, #48]	; 0x30
 8000986:	e01b      	b.n	80009c0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	685a      	ldr	r2, [r3, #4]
 8000992:	4613      	mov	r3, r2
 8000994:	009b      	lsls	r3, r3, #2
 8000996:	4413      	add	r3, r2
 8000998:	3b41      	subs	r3, #65	; 0x41
 800099a:	221f      	movs	r2, #31
 800099c:	fa02 f303 	lsl.w	r3, r2, r3
 80009a0:	43db      	mvns	r3, r3
 80009a2:	4019      	ands	r1, r3
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	685a      	ldr	r2, [r3, #4]
 80009ac:	4613      	mov	r3, r2
 80009ae:	009b      	lsls	r3, r3, #2
 80009b0:	4413      	add	r3, r2
 80009b2:	3b41      	subs	r3, #65	; 0x41
 80009b4:	fa00 f203 	lsl.w	r2, r0, r3
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	430a      	orrs	r2, r1
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80009c0:	683b      	ldr	r3, [r7, #0]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2b09      	cmp	r3, #9
 80009c6:	d91c      	bls.n	8000a02 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	68d9      	ldr	r1, [r3, #12]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	3b1e      	subs	r3, #30
 80009da:	2207      	movs	r2, #7
 80009dc:	fa02 f303 	lsl.w	r3, r2, r3
 80009e0:	43db      	mvns	r3, r3
 80009e2:	4019      	ands	r1, r3
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	6898      	ldr	r0, [r3, #8]
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	681a      	ldr	r2, [r3, #0]
 80009ec:	4613      	mov	r3, r2
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	4413      	add	r3, r2
 80009f2:	3b1e      	subs	r3, #30
 80009f4:	fa00 f203 	lsl.w	r2, r0, r3
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	430a      	orrs	r2, r1
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	e019      	b.n	8000a36 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	6919      	ldr	r1, [r3, #16]
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4613      	mov	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	4413      	add	r3, r2
 8000a12:	2207      	movs	r2, #7
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	4019      	ands	r1, r3
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	6898      	ldr	r0, [r3, #8]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	4613      	mov	r3, r2
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	4413      	add	r3, r2
 8000a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	430a      	orrs	r2, r1
 8000a34:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	2b10      	cmp	r3, #16
 8000a3c:	d003      	beq.n	8000a46 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000a42:	2b11      	cmp	r3, #17
 8000a44:	d132      	bne.n	8000aac <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_ADC_ConfigChannel+0x1e4>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d125      	bne.n	8000a9c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d126      	bne.n	8000aac <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	689a      	ldr	r2, [r3, #8]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000a6c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	2b10      	cmp	r3, #16
 8000a74:	d11a      	bne.n	8000aac <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a76:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <HAL_ADC_ConfigChannel+0x1e8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a13      	ldr	r2, [pc, #76]	; (8000ac8 <HAL_ADC_ConfigChannel+0x1ec>)
 8000a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a80:	0c9a      	lsrs	r2, r3, #18
 8000a82:	4613      	mov	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a8c:	e002      	b.n	8000a94 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	3b01      	subs	r3, #1
 8000a92:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d1f9      	bne.n	8000a8e <HAL_ADC_ConfigChannel+0x1b2>
 8000a9a:	e007      	b.n	8000aac <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa0:	f043 0220 	orr.w	r2, r3, #32
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	40012400 	.word	0x40012400
 8000ac4:	2000001c 	.word	0x2000001c
 8000ac8:	431bde83 	.word	0x431bde83

08000acc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	689b      	ldr	r3, [r3, #8]
 8000ade:	f003 0301 	and.w	r3, r3, #1
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d12e      	bne.n	8000b44 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	689a      	ldr	r2, [r3, #8]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f022 0201 	bic.w	r2, r2, #1
 8000af4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000af6:	f7ff fddf 	bl	80006b8 <HAL_GetTick>
 8000afa:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000afc:	e01b      	b.n	8000b36 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000afe:	f7ff fddb 	bl	80006b8 <HAL_GetTick>
 8000b02:	4602      	mov	r2, r0
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	1ad3      	subs	r3, r2, r3
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	d914      	bls.n	8000b36 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	f003 0301 	and.w	r3, r3, #1
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d10d      	bne.n	8000b36 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b1e:	f043 0210 	orr.w	r2, r3, #16
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b2a:	f043 0201 	orr.w	r2, r3, #1
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e007      	b.n	8000b46 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	689b      	ldr	r3, [r3, #8]
 8000b3c:	f003 0301 	and.w	r3, r3, #1
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d0dc      	beq.n	8000afe <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f003 0307 	and.w	r3, r3, #7
 8000b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b82:	4a04      	ldr	r2, [pc, #16]	; (8000b94 <__NVIC_SetPriorityGrouping+0x44>)
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	60d3      	str	r3, [r2, #12]
}
 8000b88:	bf00      	nop
 8000b8a:	3714      	adds	r7, #20
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	0a1b      	lsrs	r3, r3, #8
 8000ba2:	f003 0307 	and.w	r3, r3, #7
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bc80      	pop	{r7}
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	db0b      	blt.n	8000bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	f003 021f 	and.w	r2, r3, #31
 8000bcc:	4906      	ldr	r1, [pc, #24]	; (8000be8 <__NVIC_EnableIRQ+0x34>)
 8000bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd2:	095b      	lsrs	r3, r3, #5
 8000bd4:	2001      	movs	r0, #1
 8000bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bc80      	pop	{r7}
 8000ca2:	4770      	bx	lr

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff90 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff2d 	bl	8000b50 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff42 	bl	8000b98 <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff90 	bl	8000c40 <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5f 	bl	8000bec <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ff35 	bl	8000bb4 <__NVIC_EnableIRQ>
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	b082      	sub	sp, #8
 8000d56:	af00      	add	r7, sp, #0
 8000d58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff ffa2 	bl	8000ca4 <SysTick_Config>
 8000d60:	4603      	mov	r3, r0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	b085      	sub	sp, #20
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d72:	2300      	movs	r3, #0
 8000d74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d008      	beq.n	8000d94 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2204      	movs	r2, #4
 8000d86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000d90:	2301      	movs	r3, #1
 8000d92:	e020      	b.n	8000dd6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 020e 	bic.w	r2, r2, #14
 8000da2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f022 0201 	bic.w	r2, r2, #1
 8000db2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3714      	adds	r7, #20
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bc80      	pop	{r7}
 8000dde:	4770      	bx	lr

08000de0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	2b02      	cmp	r3, #2
 8000df6:	d005      	beq.n	8000e04 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2204      	movs	r2, #4
 8000dfc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	73fb      	strb	r3, [r7, #15]
 8000e02:	e051      	b.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 020e 	bic.w	r2, r2, #14
 8000e12:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f022 0201 	bic.w	r2, r2, #1
 8000e22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a22      	ldr	r2, [pc, #136]	; (8000eb4 <HAL_DMA_Abort_IT+0xd4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d029      	beq.n	8000e82 <HAL_DMA_Abort_IT+0xa2>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <HAL_DMA_Abort_IT+0xd8>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d022      	beq.n	8000e7e <HAL_DMA_Abort_IT+0x9e>
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a1f      	ldr	r2, [pc, #124]	; (8000ebc <HAL_DMA_Abort_IT+0xdc>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d01a      	beq.n	8000e78 <HAL_DMA_Abort_IT+0x98>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a1e      	ldr	r2, [pc, #120]	; (8000ec0 <HAL_DMA_Abort_IT+0xe0>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d012      	beq.n	8000e72 <HAL_DMA_Abort_IT+0x92>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a1c      	ldr	r2, [pc, #112]	; (8000ec4 <HAL_DMA_Abort_IT+0xe4>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d00a      	beq.n	8000e6c <HAL_DMA_Abort_IT+0x8c>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a1b      	ldr	r2, [pc, #108]	; (8000ec8 <HAL_DMA_Abort_IT+0xe8>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d102      	bne.n	8000e66 <HAL_DMA_Abort_IT+0x86>
 8000e60:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000e64:	e00e      	b.n	8000e84 <HAL_DMA_Abort_IT+0xa4>
 8000e66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e6a:	e00b      	b.n	8000e84 <HAL_DMA_Abort_IT+0xa4>
 8000e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e70:	e008      	b.n	8000e84 <HAL_DMA_Abort_IT+0xa4>
 8000e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e76:	e005      	b.n	8000e84 <HAL_DMA_Abort_IT+0xa4>
 8000e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e7c:	e002      	b.n	8000e84 <HAL_DMA_Abort_IT+0xa4>
 8000e7e:	2310      	movs	r3, #16
 8000e80:	e000      	b.n	8000e84 <HAL_DMA_Abort_IT+0xa4>
 8000e82:	2301      	movs	r3, #1
 8000e84:	4a11      	ldr	r2, [pc, #68]	; (8000ecc <HAL_DMA_Abort_IT+0xec>)
 8000e86:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	4798      	blx	r3
    } 
  }
  return status;
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3710      	adds	r7, #16
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40020008 	.word	0x40020008
 8000eb8:	4002001c 	.word	0x4002001c
 8000ebc:	40020030 	.word	0x40020030
 8000ec0:	40020044 	.word	0x40020044
 8000ec4:	40020058 	.word	0x40020058
 8000ec8:	4002006c 	.word	0x4002006c
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b08b      	sub	sp, #44	; 0x2c
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee2:	e148      	b.n	8001176 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	69fb      	ldr	r3, [r7, #28]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f040 8137 	bne.w	8001170 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	4aa3      	ldr	r2, [pc, #652]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d05e      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f0c:	4aa1      	ldr	r2, [pc, #644]	; (8001194 <HAL_GPIO_Init+0x2c4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d875      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f12:	4aa1      	ldr	r2, [pc, #644]	; (8001198 <HAL_GPIO_Init+0x2c8>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d058      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f18:	4a9f      	ldr	r2, [pc, #636]	; (8001198 <HAL_GPIO_Init+0x2c8>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d86f      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f1e:	4a9f      	ldr	r2, [pc, #636]	; (800119c <HAL_GPIO_Init+0x2cc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d052      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f24:	4a9d      	ldr	r2, [pc, #628]	; (800119c <HAL_GPIO_Init+0x2cc>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d869      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f2a:	4a9d      	ldr	r2, [pc, #628]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d04c      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f30:	4a9b      	ldr	r2, [pc, #620]	; (80011a0 <HAL_GPIO_Init+0x2d0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d863      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f36:	4a9b      	ldr	r2, [pc, #620]	; (80011a4 <HAL_GPIO_Init+0x2d4>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d046      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
 8000f3c:	4a99      	ldr	r2, [pc, #612]	; (80011a4 <HAL_GPIO_Init+0x2d4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d85d      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f42:	2b12      	cmp	r3, #18
 8000f44:	d82a      	bhi.n	8000f9c <HAL_GPIO_Init+0xcc>
 8000f46:	2b12      	cmp	r3, #18
 8000f48:	d859      	bhi.n	8000ffe <HAL_GPIO_Init+0x12e>
 8000f4a:	a201      	add	r2, pc, #4	; (adr r2, 8000f50 <HAL_GPIO_Init+0x80>)
 8000f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f50:	08000fcb 	.word	0x08000fcb
 8000f54:	08000fa5 	.word	0x08000fa5
 8000f58:	08000fb7 	.word	0x08000fb7
 8000f5c:	08000ff9 	.word	0x08000ff9
 8000f60:	08000fff 	.word	0x08000fff
 8000f64:	08000fff 	.word	0x08000fff
 8000f68:	08000fff 	.word	0x08000fff
 8000f6c:	08000fff 	.word	0x08000fff
 8000f70:	08000fff 	.word	0x08000fff
 8000f74:	08000fff 	.word	0x08000fff
 8000f78:	08000fff 	.word	0x08000fff
 8000f7c:	08000fff 	.word	0x08000fff
 8000f80:	08000fff 	.word	0x08000fff
 8000f84:	08000fff 	.word	0x08000fff
 8000f88:	08000fff 	.word	0x08000fff
 8000f8c:	08000fff 	.word	0x08000fff
 8000f90:	08000fff 	.word	0x08000fff
 8000f94:	08000fad 	.word	0x08000fad
 8000f98:	08000fc1 	.word	0x08000fc1
 8000f9c:	4a82      	ldr	r2, [pc, #520]	; (80011a8 <HAL_GPIO_Init+0x2d8>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d013      	beq.n	8000fca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fa2:	e02c      	b.n	8000ffe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	623b      	str	r3, [r7, #32]
          break;
 8000faa:	e029      	b.n	8001000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	3304      	adds	r3, #4
 8000fb2:	623b      	str	r3, [r7, #32]
          break;
 8000fb4:	e024      	b.n	8001000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	68db      	ldr	r3, [r3, #12]
 8000fba:	3308      	adds	r3, #8
 8000fbc:	623b      	str	r3, [r7, #32]
          break;
 8000fbe:	e01f      	b.n	8001000 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	330c      	adds	r3, #12
 8000fc6:	623b      	str	r3, [r7, #32]
          break;
 8000fc8:	e01a      	b.n	8001000 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d102      	bne.n	8000fd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fd2:	2304      	movs	r3, #4
 8000fd4:	623b      	str	r3, [r7, #32]
          break;
 8000fd6:	e013      	b.n	8001000 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d105      	bne.n	8000fec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	69fa      	ldr	r2, [r7, #28]
 8000fe8:	611a      	str	r2, [r3, #16]
          break;
 8000fea:	e009      	b.n	8001000 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fec:	2308      	movs	r3, #8
 8000fee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	69fa      	ldr	r2, [r7, #28]
 8000ff4:	615a      	str	r2, [r3, #20]
          break;
 8000ff6:	e003      	b.n	8001000 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	623b      	str	r3, [r7, #32]
          break;
 8000ffc:	e000      	b.n	8001000 <HAL_GPIO_Init+0x130>
          break;
 8000ffe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2bff      	cmp	r3, #255	; 0xff
 8001004:	d801      	bhi.n	800100a <HAL_GPIO_Init+0x13a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	e001      	b.n	800100e <HAL_GPIO_Init+0x13e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3304      	adds	r3, #4
 800100e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	2bff      	cmp	r3, #255	; 0xff
 8001014:	d802      	bhi.n	800101c <HAL_GPIO_Init+0x14c>
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	e002      	b.n	8001022 <HAL_GPIO_Init+0x152>
 800101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101e:	3b08      	subs	r3, #8
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	210f      	movs	r1, #15
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	401a      	ands	r2, r3
 8001034:	6a39      	ldr	r1, [r7, #32]
 8001036:	693b      	ldr	r3, [r7, #16]
 8001038:	fa01 f303 	lsl.w	r3, r1, r3
 800103c:	431a      	orrs	r2, r3
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	f000 8090 	beq.w	8001170 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001050:	4b56      	ldr	r3, [pc, #344]	; (80011ac <HAL_GPIO_Init+0x2dc>)
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	4a55      	ldr	r2, [pc, #340]	; (80011ac <HAL_GPIO_Init+0x2dc>)
 8001056:	f043 0301 	orr.w	r3, r3, #1
 800105a:	6193      	str	r3, [r2, #24]
 800105c:	4b53      	ldr	r3, [pc, #332]	; (80011ac <HAL_GPIO_Init+0x2dc>)
 800105e:	699b      	ldr	r3, [r3, #24]
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	60bb      	str	r3, [r7, #8]
 8001066:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001068:	4a51      	ldr	r2, [pc, #324]	; (80011b0 <HAL_GPIO_Init+0x2e0>)
 800106a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106c:	089b      	lsrs	r3, r3, #2
 800106e:	3302      	adds	r3, #2
 8001070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001074:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	f003 0303 	and.w	r3, r3, #3
 800107c:	009b      	lsls	r3, r3, #2
 800107e:	220f      	movs	r2, #15
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	4013      	ands	r3, r2
 800108a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a49      	ldr	r2, [pc, #292]	; (80011b4 <HAL_GPIO_Init+0x2e4>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d00d      	beq.n	80010b0 <HAL_GPIO_Init+0x1e0>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a48      	ldr	r2, [pc, #288]	; (80011b8 <HAL_GPIO_Init+0x2e8>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d007      	beq.n	80010ac <HAL_GPIO_Init+0x1dc>
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	4a47      	ldr	r2, [pc, #284]	; (80011bc <HAL_GPIO_Init+0x2ec>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d101      	bne.n	80010a8 <HAL_GPIO_Init+0x1d8>
 80010a4:	2302      	movs	r3, #2
 80010a6:	e004      	b.n	80010b2 <HAL_GPIO_Init+0x1e2>
 80010a8:	2303      	movs	r3, #3
 80010aa:	e002      	b.n	80010b2 <HAL_GPIO_Init+0x1e2>
 80010ac:	2301      	movs	r3, #1
 80010ae:	e000      	b.n	80010b2 <HAL_GPIO_Init+0x1e2>
 80010b0:	2300      	movs	r3, #0
 80010b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010b4:	f002 0203 	and.w	r2, r2, #3
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	4093      	lsls	r3, r2
 80010bc:	68fa      	ldr	r2, [r7, #12]
 80010be:	4313      	orrs	r3, r2
 80010c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010c2:	493b      	ldr	r1, [pc, #236]	; (80011b0 <HAL_GPIO_Init+0x2e0>)
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	089b      	lsrs	r3, r3, #2
 80010c8:	3302      	adds	r3, #2
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d006      	beq.n	80010ea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010dc:	4b38      	ldr	r3, [pc, #224]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 80010de:	689a      	ldr	r2, [r3, #8]
 80010e0:	4937      	ldr	r1, [pc, #220]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	608b      	str	r3, [r1, #8]
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ea:	4b35      	ldr	r3, [pc, #212]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 80010ec:	689a      	ldr	r2, [r3, #8]
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	4933      	ldr	r1, [pc, #204]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 80010f4:	4013      	ands	r3, r2
 80010f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d006      	beq.n	8001112 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001104:	4b2e      	ldr	r3, [pc, #184]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 8001106:	68da      	ldr	r2, [r3, #12]
 8001108:	492d      	ldr	r1, [pc, #180]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	4313      	orrs	r3, r2
 800110e:	60cb      	str	r3, [r1, #12]
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	43db      	mvns	r3, r3
 800111a:	4929      	ldr	r1, [pc, #164]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 800111c:	4013      	ands	r3, r2
 800111e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800112c:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	4923      	ldr	r1, [pc, #140]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	4313      	orrs	r3, r2
 8001136:	604b      	str	r3, [r1, #4]
 8001138:	e006      	b.n	8001148 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800113a:	4b21      	ldr	r3, [pc, #132]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 800113c:	685a      	ldr	r2, [r3, #4]
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	43db      	mvns	r3, r3
 8001142:	491f      	ldr	r1, [pc, #124]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 8001144:	4013      	ands	r3, r2
 8001146:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001154:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	4919      	ldr	r1, [pc, #100]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001162:	4b17      	ldr	r3, [pc, #92]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	43db      	mvns	r3, r3
 800116a:	4915      	ldr	r1, [pc, #84]	; (80011c0 <HAL_GPIO_Init+0x2f0>)
 800116c:	4013      	ands	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	3301      	adds	r3, #1
 8001174:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	fa22 f303 	lsr.w	r3, r2, r3
 8001180:	2b00      	cmp	r3, #0
 8001182:	f47f aeaf 	bne.w	8000ee4 <HAL_GPIO_Init+0x14>
  }
}
 8001186:	bf00      	nop
 8001188:	bf00      	nop
 800118a:	372c      	adds	r7, #44	; 0x2c
 800118c:	46bd      	mov	sp, r7
 800118e:	bc80      	pop	{r7}
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	10320000 	.word	0x10320000
 8001198:	10310000 	.word	0x10310000
 800119c:	10220000 	.word	0x10220000
 80011a0:	10210000 	.word	0x10210000
 80011a4:	10120000 	.word	0x10120000
 80011a8:	10110000 	.word	0x10110000
 80011ac:	40021000 	.word	0x40021000
 80011b0:	40010000 	.word	0x40010000
 80011b4:	40010800 	.word	0x40010800
 80011b8:	40010c00 	.word	0x40010c00
 80011bc:	40011000 	.word	0x40011000
 80011c0:	40010400 	.word	0x40010400

080011c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	460b      	mov	r3, r1
 80011ce:	807b      	strh	r3, [r7, #2]
 80011d0:	4613      	mov	r3, r2
 80011d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011d4:	787b      	ldrb	r3, [r7, #1]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011da:	887a      	ldrh	r2, [r7, #2]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011e0:	e003      	b.n	80011ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011e2:	887b      	ldrh	r3, [r7, #2]
 80011e4:	041a      	lsls	r2, r3, #16
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	611a      	str	r2, [r3, #16]
}
 80011ea:	bf00      	nop
 80011ec:	370c      	adds	r7, #12
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	4013      	ands	r3, r2
 800120c:	041a      	lsls	r2, r3, #16
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43d9      	mvns	r1, r3
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	400b      	ands	r3, r1
 8001216:	431a      	orrs	r2, r3
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	611a      	str	r2, [r3, #16]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
	...

08001228 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e26c      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	f000 8087 	beq.w	8001356 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001248:	4b92      	ldr	r3, [pc, #584]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b04      	cmp	r3, #4
 8001252:	d00c      	beq.n	800126e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001254:	4b8f      	ldr	r3, [pc, #572]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 030c 	and.w	r3, r3, #12
 800125c:	2b08      	cmp	r3, #8
 800125e:	d112      	bne.n	8001286 <HAL_RCC_OscConfig+0x5e>
 8001260:	4b8c      	ldr	r3, [pc, #560]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800126c:	d10b      	bne.n	8001286 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800126e:	4b89      	ldr	r3, [pc, #548]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d06c      	beq.n	8001354 <HAL_RCC_OscConfig+0x12c>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d168      	bne.n	8001354 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e246      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800128e:	d106      	bne.n	800129e <HAL_RCC_OscConfig+0x76>
 8001290:	4b80      	ldr	r3, [pc, #512]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a7f      	ldr	r2, [pc, #508]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001296:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	e02e      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10c      	bne.n	80012c0 <HAL_RCC_OscConfig+0x98>
 80012a6:	4b7b      	ldr	r3, [pc, #492]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a7a      	ldr	r2, [pc, #488]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	4b78      	ldr	r3, [pc, #480]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a77      	ldr	r2, [pc, #476]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0xbc>
 80012ca:	4b72      	ldr	r3, [pc, #456]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a71      	ldr	r2, [pc, #452]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6f      	ldr	r3, [pc, #444]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6e      	ldr	r2, [pc, #440]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xd4>
 80012e4:	4b6b      	ldr	r3, [pc, #428]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a6a      	ldr	r2, [pc, #424]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b68      	ldr	r3, [pc, #416]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a67      	ldr	r2, [pc, #412]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff f9d8 	bl	80006b8 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff f9d4 	bl	80006b8 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e1fa      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5d      	ldr	r3, [pc, #372]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xe4>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff f9c4 	bl	80006b8 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff f9c0 	bl	80006b8 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1e6      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b53      	ldr	r3, [pc, #332]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0x10c>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001362:	4b4c      	ldr	r3, [pc, #304]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800136e:	4b49      	ldr	r3, [pc, #292]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f003 030c 	and.w	r3, r3, #12
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x18c>
 800137a:	4b46      	ldr	r3, [pc, #280]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b43      	ldr	r3, [pc, #268]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x176>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	691b      	ldr	r3, [r3, #16]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1ba      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3d      	ldr	r3, [pc, #244]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4939      	ldr	r1, [pc, #228]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	691b      	ldr	r3, [r3, #16]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b36      	ldr	r3, [pc, #216]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c2:	f7ff f979 	bl	80006b8 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff f975 	bl	80006b8 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e19b      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4927      	ldr	r1, [pc, #156]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b26      	ldr	r3, [pc, #152]	; (8001498 <HAL_RCC_OscConfig+0x270>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff f958 	bl	80006b8 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff f954 	bl	80006b8 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e17a      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d03a      	beq.n	80014ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d019      	beq.n	8001472 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b17      	ldr	r3, [pc, #92]	; (800149c <HAL_RCC_OscConfig+0x274>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001444:	f7ff f938 	bl	80006b8 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff f934 	bl	80006b8 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e15a      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0d      	ldr	r3, [pc, #52]	; (8001494 <HAL_RCC_OscConfig+0x26c>)
 8001460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800146a:	2001      	movs	r0, #1
 800146c:	f000 facc 	bl	8001a08 <RCC_Delay>
 8001470:	e01c      	b.n	80014ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001472:	4b0a      	ldr	r3, [pc, #40]	; (800149c <HAL_RCC_OscConfig+0x274>)
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001478:	f7ff f91e 	bl	80006b8 <HAL_GetTick>
 800147c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800147e:	e00f      	b.n	80014a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001480:	f7ff f91a 	bl	80006b8 <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	2b02      	cmp	r3, #2
 800148c:	d908      	bls.n	80014a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800148e:	2303      	movs	r3, #3
 8001490:	e140      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
 8001492:	bf00      	nop
 8001494:	40021000 	.word	0x40021000
 8001498:	42420000 	.word	0x42420000
 800149c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014a0:	4b9e      	ldr	r3, [pc, #632]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d1e9      	bne.n	8001480 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 0304 	and.w	r3, r3, #4
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 80a6 	beq.w	8001606 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ba:	2300      	movs	r3, #0
 80014bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014be:	4b97      	ldr	r3, [pc, #604]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 80014c0:	69db      	ldr	r3, [r3, #28]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d10d      	bne.n	80014e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b94      	ldr	r3, [pc, #592]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	4a93      	ldr	r2, [pc, #588]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 80014d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d4:	61d3      	str	r3, [r2, #28]
 80014d6:	4b91      	ldr	r3, [pc, #580]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 80014d8:	69db      	ldr	r3, [r3, #28]
 80014da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e2:	2301      	movs	r3, #1
 80014e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e6:	4b8e      	ldr	r3, [pc, #568]	; (8001720 <HAL_RCC_OscConfig+0x4f8>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d118      	bne.n	8001524 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f2:	4b8b      	ldr	r3, [pc, #556]	; (8001720 <HAL_RCC_OscConfig+0x4f8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a8a      	ldr	r2, [pc, #552]	; (8001720 <HAL_RCC_OscConfig+0x4f8>)
 80014f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fe:	f7ff f8db 	bl	80006b8 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001506:	f7ff f8d7 	bl	80006b8 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b64      	cmp	r3, #100	; 0x64
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e0fd      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001518:	4b81      	ldr	r3, [pc, #516]	; (8001720 <HAL_RCC_OscConfig+0x4f8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x312>
 800152c:	4b7b      	ldr	r3, [pc, #492]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 800152e:	6a1b      	ldr	r3, [r3, #32]
 8001530:	4a7a      	ldr	r2, [pc, #488]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6213      	str	r3, [r2, #32]
 8001538:	e02d      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	68db      	ldr	r3, [r3, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x334>
 8001542:	4b76      	ldr	r3, [pc, #472]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a75      	ldr	r2, [pc, #468]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	4b73      	ldr	r3, [pc, #460]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a72      	ldr	r2, [pc, #456]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	e01c      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b05      	cmp	r3, #5
 8001562:	d10c      	bne.n	800157e <HAL_RCC_OscConfig+0x356>
 8001564:	4b6d      	ldr	r3, [pc, #436]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a6c      	ldr	r2, [pc, #432]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 800156a:	f043 0304 	orr.w	r3, r3, #4
 800156e:	6213      	str	r3, [r2, #32]
 8001570:	4b6a      	ldr	r3, [pc, #424]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001572:	6a1b      	ldr	r3, [r3, #32]
 8001574:	4a69      	ldr	r2, [pc, #420]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	6213      	str	r3, [r2, #32]
 800157c:	e00b      	b.n	8001596 <HAL_RCC_OscConfig+0x36e>
 800157e:	4b67      	ldr	r3, [pc, #412]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	4a66      	ldr	r2, [pc, #408]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001584:	f023 0301 	bic.w	r3, r3, #1
 8001588:	6213      	str	r3, [r2, #32]
 800158a:	4b64      	ldr	r3, [pc, #400]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 800158c:	6a1b      	ldr	r3, [r3, #32]
 800158e:	4a63      	ldr	r2, [pc, #396]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001590:	f023 0304 	bic.w	r3, r3, #4
 8001594:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	68db      	ldr	r3, [r3, #12]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d015      	beq.n	80015ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159e:	f7ff f88b 	bl	80006b8 <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015a4:	e00a      	b.n	80015bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a6:	f7ff f887 	bl	80006b8 <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d901      	bls.n	80015bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	e0ab      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015bc:	4b57      	ldr	r3, [pc, #348]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d0ee      	beq.n	80015a6 <HAL_RCC_OscConfig+0x37e>
 80015c8:	e014      	b.n	80015f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ca:	f7ff f875 	bl	80006b8 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015d0:	e00a      	b.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015d2:	f7ff f871 	bl	80006b8 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e095      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e8:	4b4c      	ldr	r3, [pc, #304]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1ee      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d105      	bne.n	8001606 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015fa:	4b48      	ldr	r3, [pc, #288]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	4a47      	ldr	r2, [pc, #284]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001600:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001604:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	2b00      	cmp	r3, #0
 800160c:	f000 8081 	beq.w	8001712 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001610:	4b42      	ldr	r3, [pc, #264]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f003 030c 	and.w	r3, r3, #12
 8001618:	2b08      	cmp	r3, #8
 800161a:	d061      	beq.n	80016e0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	2b02      	cmp	r3, #2
 8001622:	d146      	bne.n	80016b2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <HAL_RCC_OscConfig+0x4fc>)
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff f845 	bl	80006b8 <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff f841 	bl	80006b8 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e067      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001644:	4b35      	ldr	r3, [pc, #212]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d1f0      	bne.n	8001632 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6a1b      	ldr	r3, [r3, #32]
 8001654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001658:	d108      	bne.n	800166c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800165a:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	492d      	ldr	r1, [pc, #180]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166c:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a19      	ldr	r1, [r3, #32]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167c:	430b      	orrs	r3, r1
 800167e:	4927      	ldr	r1, [pc, #156]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <HAL_RCC_OscConfig+0x4fc>)
 8001686:	2201      	movs	r2, #1
 8001688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168a:	f7ff f815 	bl	80006b8 <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001692:	f7ff f811 	bl	80006b8 <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e037      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016a4:	4b1d      	ldr	r3, [pc, #116]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d0f0      	beq.n	8001692 <HAL_RCC_OscConfig+0x46a>
 80016b0:	e02f      	b.n	8001712 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b2:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <HAL_RCC_OscConfig+0x4fc>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7fe fffe 	bl	80006b8 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c0:	f7fe fffa 	bl	80006b8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e020      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x498>
 80016de:	e018      	b.n	8001712 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	69db      	ldr	r3, [r3, #28]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e013      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_OscConfig+0x4f4>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d106      	bne.n	800170e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170a:	429a      	cmp	r2, r3
 800170c:	d001      	beq.n	8001712 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	e000      	b.n	8001714 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	3718      	adds	r7, #24
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40021000 	.word	0x40021000
 8001720:	40007000 	.word	0x40007000
 8001724:	42420060 	.word	0x42420060

08001728 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d101      	bne.n	800173c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0d0      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800173c:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0307 	and.w	r3, r3, #7
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	429a      	cmp	r2, r3
 8001748:	d910      	bls.n	800176c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174a:	4b67      	ldr	r3, [pc, #412]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 0207 	bic.w	r2, r3, #7
 8001752:	4965      	ldr	r1, [pc, #404]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	4313      	orrs	r3, r2
 8001758:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0b8      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001784:	4b59      	ldr	r3, [pc, #356]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	4a58      	ldr	r2, [pc, #352]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 800178a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800178e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800179c:	4b53      	ldr	r3, [pc, #332]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a52      	ldr	r2, [pc, #328]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	494d      	ldr	r1, [pc, #308]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d040      	beq.n	8001848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d115      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e07f      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d107      	bne.n	80017f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017e6:	4b41      	ldr	r3, [pc, #260]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e073      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017f6:	4b3d      	ldr	r3, [pc, #244]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e06b      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001806:	4b39      	ldr	r3, [pc, #228]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f023 0203 	bic.w	r2, r3, #3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	4936      	ldr	r1, [pc, #216]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001818:	f7fe ff4e 	bl	80006b8 <HAL_GetTick>
 800181c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181e:	e00a      	b.n	8001836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7fe ff4a 	bl	80006b8 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	f241 3288 	movw	r2, #5000	; 0x1388
 800182e:	4293      	cmp	r3, r2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e053      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f003 020c 	and.w	r2, r3, #12
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	429a      	cmp	r2, r3
 8001846:	d1eb      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001848:	4b27      	ldr	r3, [pc, #156]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	429a      	cmp	r2, r3
 8001854:	d210      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001856:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 0207 	bic.w	r2, r3, #7
 800185e:	4922      	ldr	r1, [pc, #136]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	4313      	orrs	r3, r2
 8001864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b20      	ldr	r3, [pc, #128]	; (80018e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e032      	b.n	80018de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4916      	ldr	r1, [pc, #88]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018a2:	4b12      	ldr	r3, [pc, #72]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	490e      	ldr	r1, [pc, #56]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018b6:	f000 f821 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b0b      	ldr	r3, [pc, #44]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	490a      	ldr	r1, [pc, #40]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018c8:	5ccb      	ldrb	r3, [r1, r3]
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <HAL_RCC_ClockConfig+0x1cc>)
 80018d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1d0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7fe feac 	bl	8000634 <HAL_InitTick>

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40022000 	.word	0x40022000
 80018ec:	40021000 	.word	0x40021000
 80018f0:	080028f4 	.word	0x080028f4
 80018f4:	2000001c 	.word	0x2000001c
 80018f8:	20000020 	.word	0x20000020

080018fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	2300      	movs	r3, #0
 8001910:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_RCC_GetSysClockFreq+0x94>)
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b04      	cmp	r3, #4
 8001924:	d002      	beq.n	800192c <HAL_RCC_GetSysClockFreq+0x30>
 8001926:	2b08      	cmp	r3, #8
 8001928:	d003      	beq.n	8001932 <HAL_RCC_GetSysClockFreq+0x36>
 800192a:	e027      	b.n	800197c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_RCC_GetSysClockFreq+0x98>)
 800192e:	613b      	str	r3, [r7, #16]
      break;
 8001930:	e027      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	0c9b      	lsrs	r3, r3, #18
 8001936:	f003 030f 	and.w	r3, r3, #15
 800193a:	4a17      	ldr	r2, [pc, #92]	; (8001998 <HAL_RCC_GetSysClockFreq+0x9c>)
 800193c:	5cd3      	ldrb	r3, [r2, r3]
 800193e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d010      	beq.n	800196c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800194a:	4b11      	ldr	r3, [pc, #68]	; (8001990 <HAL_RCC_GetSysClockFreq+0x94>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	0c5b      	lsrs	r3, r3, #17
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	4a11      	ldr	r2, [pc, #68]	; (800199c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a0d      	ldr	r2, [pc, #52]	; (8001994 <HAL_RCC_GetSysClockFreq+0x98>)
 800195e:	fb02 f203 	mul.w	r2, r2, r3
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	fbb2 f3f3 	udiv	r3, r2, r3
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	e004      	b.n	8001976 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a0c      	ldr	r2, [pc, #48]	; (80019a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001970:	fb02 f303 	mul.w	r3, r2, r3
 8001974:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	613b      	str	r3, [r7, #16]
      break;
 800197a:	e002      	b.n	8001982 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_RCC_GetSysClockFreq+0x98>)
 800197e:	613b      	str	r3, [r7, #16]
      break;
 8001980:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001982:	693b      	ldr	r3, [r7, #16]
}
 8001984:	4618      	mov	r0, r3
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	007a1200 	.word	0x007a1200
 8001998:	0800290c 	.word	0x0800290c
 800199c:	0800291c 	.word	0x0800291c
 80019a0:	003d0900 	.word	0x003d0900

080019a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019a8:	4b02      	ldr	r3, [pc, #8]	; (80019b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80019aa:	681b      	ldr	r3, [r3, #0]
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bc80      	pop	{r7}
 80019b2:	4770      	bx	lr
 80019b4:	2000001c 	.word	0x2000001c

080019b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019bc:	f7ff fff2 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019c0:	4602      	mov	r2, r0
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	0a1b      	lsrs	r3, r3, #8
 80019c8:	f003 0307 	and.w	r3, r3, #7
 80019cc:	4903      	ldr	r1, [pc, #12]	; (80019dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ce:	5ccb      	ldrb	r3, [r1, r3]
 80019d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40021000 	.word	0x40021000
 80019dc:	08002904 	.word	0x08002904

080019e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80019e4:	f7ff ffde 	bl	80019a4 <HAL_RCC_GetHCLKFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_RCC_GetPCLK2Freq+0x20>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	0adb      	lsrs	r3, r3, #11
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4903      	ldr	r1, [pc, #12]	; (8001a04 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	08002904 	.word	0x08002904

08001a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <RCC_Delay+0x34>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <RCC_Delay+0x38>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0a5b      	lsrs	r3, r3, #9
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a24:	bf00      	nop
  }
  while (Delay --);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	60fa      	str	r2, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f9      	bne.n	8001a24 <RCC_Delay+0x1c>
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	2000001c 	.word	0x2000001c
 8001a40:	10624dd3 	.word	0x10624dd3

08001a44 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b086      	sub	sp, #24
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	613b      	str	r3, [r7, #16]
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d07d      	beq.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001a60:	2300      	movs	r3, #0
 8001a62:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a64:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a66:	69db      	ldr	r3, [r3, #28]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10d      	bne.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a70:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	4a4b      	ldr	r2, [pc, #300]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7a:	61d3      	str	r3, [r2, #28]
 8001a7c:	4b49      	ldr	r3, [pc, #292]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	4b46      	ldr	r3, [pc, #280]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d118      	bne.n	8001aca <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a98:	4b43      	ldr	r3, [pc, #268]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a42      	ldr	r2, [pc, #264]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa4:	f7fe fe08 	bl	80006b8 <HAL_GetTick>
 8001aa8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aaa:	e008      	b.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aac:	f7fe fe04 	bl	80006b8 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	2b64      	cmp	r3, #100	; 0x64
 8001ab8:	d901      	bls.n	8001abe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001aba:	2303      	movs	r3, #3
 8001abc:	e06d      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abe:	4b3a      	ldr	r3, [pc, #232]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d0f0      	beq.n	8001aac <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001aca:	4b36      	ldr	r3, [pc, #216]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001acc:	6a1b      	ldr	r3, [r3, #32]
 8001ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ad2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d02e      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ae2:	68fa      	ldr	r2, [r7, #12]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d027      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ae8:	4b2e      	ldr	r3, [pc, #184]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001af0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001af2:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001af8:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001afe:	4a29      	ldr	r2, [pc, #164]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d014      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0e:	f7fe fdd3 	bl	80006b8 <HAL_GetTick>
 8001b12:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b14:	e00a      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b16:	f7fe fdcf 	bl	80006b8 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e036      	b.n	8001b9a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b2e:	6a1b      	ldr	r3, [r3, #32]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0ee      	beq.n	8001b16 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b38:	4b1a      	ldr	r3, [pc, #104]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b3a:	6a1b      	ldr	r3, [r3, #32]
 8001b3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4917      	ldr	r1, [pc, #92]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b4a:	7dfb      	ldrb	r3, [r7, #23]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d105      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b50:	4b14      	ldr	r3, [pc, #80]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	4a13      	ldr	r2, [pc, #76]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0302 	and.w	r3, r3, #2
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b68:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	490b      	ldr	r1, [pc, #44]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d008      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001b86:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	4904      	ldr	r1, [pc, #16]	; (8001ba4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40007000 	.word	0x40007000
 8001bac:	42420440 	.word	0x42420440

08001bb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e042      	b.n	8001c48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d106      	bne.n	8001bdc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7fe fc66 	bl	80004a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2224      	movs	r2, #36	; 0x24
 8001be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	68da      	ldr	r2, [r3, #12]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 fdb7 	bl	8002768 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	691a      	ldr	r2, [r3, #16]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2220      	movs	r2, #32
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2220      	movs	r2, #32
 8001c3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2200      	movs	r2, #0
 8001c44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af02      	add	r7, sp, #8
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b20      	cmp	r3, #32
 8001c6e:	d175      	bne.n	8001d5c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d002      	beq.n	8001c7c <HAL_UART_Transmit+0x2c>
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d101      	bne.n	8001c80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e06e      	b.n	8001d5e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2200      	movs	r2, #0
 8001c84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2221      	movs	r2, #33	; 0x21
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001c8e:	f7fe fd13 	bl	80006b8 <HAL_GetTick>
 8001c92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	88fa      	ldrh	r2, [r7, #6]
 8001c98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	88fa      	ldrh	r2, [r7, #6]
 8001c9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca8:	d108      	bne.n	8001cbc <HAL_UART_Transmit+0x6c>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d104      	bne.n	8001cbc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	61bb      	str	r3, [r7, #24]
 8001cba:	e003      	b.n	8001cc4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001cc4:	e02e      	b.n	8001d24 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2180      	movs	r1, #128	; 0x80
 8001cd0:	68f8      	ldr	r0, [r7, #12]
 8001cd2:	f000 fb1c 	bl	800230e <UART_WaitOnFlagUntilTimeout>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d005      	beq.n	8001ce8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e03a      	b.n	8001d5e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d10b      	bne.n	8001d06 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cfc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	3302      	adds	r3, #2
 8001d02:	61bb      	str	r3, [r7, #24]
 8001d04:	e007      	b.n	8001d16 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	3301      	adds	r3, #1
 8001d14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	3b01      	subs	r3, #1
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d28:	b29b      	uxth	r3, r3
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1cb      	bne.n	8001cc6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	2200      	movs	r2, #0
 8001d36:	2140      	movs	r1, #64	; 0x40
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 fae8 	bl	800230e <UART_WaitOnFlagUntilTimeout>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2220      	movs	r2, #32
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e006      	b.n	8001d5e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2220      	movs	r2, #32
 8001d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e000      	b.n	8001d5e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001d5c:	2302      	movs	r3, #2
  }
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3720      	adds	r7, #32
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	4613      	mov	r3, r2
 8001d72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	d112      	bne.n	8001da6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d002      	beq.n	8001d8c <HAL_UART_Receive_IT+0x26>
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e00b      	b.n	8001da8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d96:	88fb      	ldrh	r3, [r7, #6]
 8001d98:	461a      	mov	r2, r3
 8001d9a:	68b9      	ldr	r1, [r7, #8]
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f000 fb0f 	bl	80023c0 <UART_Start_Receive_IT>
 8001da2:	4603      	mov	r3, r0
 8001da4:	e000      	b.n	8001da8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001da6:	2302      	movs	r3, #2
  }
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3710      	adds	r7, #16
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}

08001db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b0ba      	sub	sp, #232	; 0xe8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10f      	bne.n	8001e16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001dfa:	f003 0320 	and.w	r3, r3, #32
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d009      	beq.n	8001e16 <HAL_UART_IRQHandler+0x66>
 8001e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 fbec 	bl	80025ec <UART_Receive_IT>
      return;
 8001e14:	e25b      	b.n	80022ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 80de 	beq.w	8001fdc <HAL_UART_IRQHandler+0x22c>
 8001e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d106      	bne.n	8001e3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80d1 	beq.w	8001fdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00b      	beq.n	8001e5e <HAL_UART_IRQHandler+0xae>
 8001e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f043 0201 	orr.w	r2, r3, #1
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00b      	beq.n	8001e82 <HAL_UART_IRQHandler+0xd2>
 8001e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d005      	beq.n	8001e82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	f043 0202 	orr.w	r2, r3, #2
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00b      	beq.n	8001ea6 <HAL_UART_IRQHandler+0xf6>
 8001e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f043 0204 	orr.w	r2, r3, #4
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001eaa:	f003 0308 	and.w	r3, r3, #8
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d011      	beq.n	8001ed6 <HAL_UART_IRQHandler+0x126>
 8001eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001eb6:	f003 0320 	and.w	r3, r3, #32
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d105      	bne.n	8001eca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f043 0208 	orr.w	r2, r3, #8
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 81f2 	beq.w	80022c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_UART_IRQHandler+0x14e>
 8001eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d002      	beq.n	8001efe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f000 fb77 	bl	80025ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	695b      	ldr	r3, [r3, #20]
 8001f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	bf14      	ite	ne
 8001f0c:	2301      	movne	r3, #1
 8001f0e:	2300      	moveq	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <HAL_UART_IRQHandler+0x17a>
 8001f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d04f      	beq.n	8001fca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 fa81 	bl	8002432 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d041      	beq.n	8001fc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	3314      	adds	r3, #20
 8001f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f4c:	e853 3f00 	ldrex	r3, [r3]
 8001f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8001f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	3314      	adds	r3, #20
 8001f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8001f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8001f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8001f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001f7a:	e841 2300 	strex	r3, r2, [r1]
 8001f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8001f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1d9      	bne.n	8001f3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d013      	beq.n	8001fba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f96:	4a7e      	ldr	r2, [pc, #504]	; (8002190 <HAL_UART_IRQHandler+0x3e0>)
 8001f98:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe ff1e 	bl	8000de0 <HAL_DMA_Abort_IT>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d016      	beq.n	8001fd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fb8:	e00e      	b.n	8001fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f993 	bl	80022e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc0:	e00a      	b.n	8001fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f98f 	bl	80022e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fc8:	e006      	b.n	8001fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001fca:	6878      	ldr	r0, [r7, #4]
 8001fcc:	f000 f98b 	bl	80022e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001fd6:	e175      	b.n	80022c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001fd8:	bf00      	nop
    return;
 8001fda:	e173      	b.n	80022c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	f040 814f 	bne.w	8002284 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8001fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fea:	f003 0310 	and.w	r3, r3, #16
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 8148 	beq.w	8002284 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8001ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ff8:	f003 0310 	and.w	r3, r3, #16
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 8141 	beq.w	8002284 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002002:	2300      	movs	r3, #0
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	60bb      	str	r3, [r7, #8]
 8002016:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	695b      	ldr	r3, [r3, #20]
 800201e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002022:	2b00      	cmp	r3, #0
 8002024:	f000 80b6 	beq.w	8002194 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002038:	2b00      	cmp	r3, #0
 800203a:	f000 8145 	beq.w	80022c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002046:	429a      	cmp	r2, r3
 8002048:	f080 813e 	bcs.w	80022c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002052:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002058:	699b      	ldr	r3, [r3, #24]
 800205a:	2b20      	cmp	r3, #32
 800205c:	f000 8088 	beq.w	8002170 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	330c      	adds	r3, #12
 8002066:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800206a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800206e:	e853 3f00 	ldrex	r3, [r3]
 8002072:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002076:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800207a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800207e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	330c      	adds	r3, #12
 8002088:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800208c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002094:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002098:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800209c:	e841 2300 	strex	r3, r2, [r1]
 80020a0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80020a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1d9      	bne.n	8002060 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	3314      	adds	r3, #20
 80020b2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020b6:	e853 3f00 	ldrex	r3, [r3]
 80020ba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80020bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	3314      	adds	r3, #20
 80020cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80020d0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80020d4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020d6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80020d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80020dc:	e841 2300 	strex	r3, r2, [r1]
 80020e0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80020e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1e1      	bne.n	80020ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	3314      	adds	r3, #20
 80020ee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020f2:	e853 3f00 	ldrex	r3, [r3]
 80020f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80020f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80020fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	3314      	adds	r3, #20
 8002108:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800210c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800210e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002110:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002112:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002114:	e841 2300 	strex	r3, r2, [r1]
 8002118:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800211a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1e3      	bne.n	80020e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	330c      	adds	r3, #12
 8002134:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002138:	e853 3f00 	ldrex	r3, [r3]
 800213c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800213e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002140:	f023 0310 	bic.w	r3, r3, #16
 8002144:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	330c      	adds	r3, #12
 800214e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002152:	65ba      	str	r2, [r7, #88]	; 0x58
 8002154:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002156:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002158:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800215a:	e841 2300 	strex	r3, r2, [r1]
 800215e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002160:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1e3      	bne.n	800212e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fdfd 	bl	8000d6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2202      	movs	r2, #2
 8002174:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800217e:	b29b      	uxth	r3, r3
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	b29b      	uxth	r3, r3
 8002184:	4619      	mov	r1, r3
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 f8b6 	bl	80022f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800218c:	e09c      	b.n	80022c8 <HAL_UART_IRQHandler+0x518>
 800218e:	bf00      	nop
 8002190:	080024f7 	.word	0x080024f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800219c:	b29b      	uxth	r3, r3
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 808e 	beq.w	80022cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80021b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8089 	beq.w	80022cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	330c      	adds	r3, #12
 80021c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c4:	e853 3f00 	ldrex	r3, [r3]
 80021c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80021ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	330c      	adds	r3, #12
 80021da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80021de:	647a      	str	r2, [r7, #68]	; 0x44
 80021e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80021e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80021e6:	e841 2300 	strex	r3, r2, [r1]
 80021ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80021ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1e3      	bne.n	80021ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3314      	adds	r3, #20
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	e853 3f00 	ldrex	r3, [r3]
 8002200:	623b      	str	r3, [r7, #32]
   return(result);
 8002202:	6a3b      	ldr	r3, [r7, #32]
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	3314      	adds	r3, #20
 8002212:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002216:	633a      	str	r2, [r7, #48]	; 0x30
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800221a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800221c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800221e:	e841 2300 	strex	r3, r2, [r1]
 8002222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1e3      	bne.n	80021f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2220      	movs	r2, #32
 800222e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	e853 3f00 	ldrex	r3, [r3]
 8002246:	60fb      	str	r3, [r7, #12]
   return(result);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f023 0310 	bic.w	r3, r3, #16
 800224e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	330c      	adds	r3, #12
 8002258:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800225c:	61fa      	str	r2, [r7, #28]
 800225e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002260:	69b9      	ldr	r1, [r7, #24]
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	e841 2300 	strex	r3, r2, [r1]
 8002268:	617b      	str	r3, [r7, #20]
   return(result);
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d1e3      	bne.n	8002238 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002276:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800227a:	4619      	mov	r1, r3
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f83b 	bl	80022f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002282:	e023      	b.n	80022cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002284:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002288:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <HAL_UART_IRQHandler+0x4f4>
 8002290:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002298:	2b00      	cmp	r3, #0
 800229a:	d003      	beq.n	80022a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f000 f93e 	bl	800251e <UART_Transmit_IT>
    return;
 80022a2:	e014      	b.n	80022ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80022a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00e      	beq.n	80022ce <HAL_UART_IRQHandler+0x51e>
 80022b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f000 f97d 	bl	80025bc <UART_EndTransmit_IT>
    return;
 80022c2:	e004      	b.n	80022ce <HAL_UART_IRQHandler+0x51e>
    return;
 80022c4:	bf00      	nop
 80022c6:	e002      	b.n	80022ce <HAL_UART_IRQHandler+0x51e>
      return;
 80022c8:	bf00      	nop
 80022ca:	e000      	b.n	80022ce <HAL_UART_IRQHandler+0x51e>
      return;
 80022cc:	bf00      	nop
  }
}
 80022ce:	37e8      	adds	r7, #232	; 0xe8
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bc80      	pop	{r7}
 80022e4:	4770      	bx	lr

080022e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80022e6:	b480      	push	{r7}
 80022e8:	b083      	sub	sp, #12
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80022ee:	bf00      	nop
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b086      	sub	sp, #24
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	4613      	mov	r3, r2
 800231c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800231e:	e03b      	b.n	8002398 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002326:	d037      	beq.n	8002398 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002328:	f7fe f9c6 	bl	80006b8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	6a3a      	ldr	r2, [r7, #32]
 8002334:	429a      	cmp	r2, r3
 8002336:	d302      	bcc.n	800233e <UART_WaitOnFlagUntilTimeout+0x30>
 8002338:	6a3b      	ldr	r3, [r7, #32]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e03a      	b.n	80023b8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b00      	cmp	r3, #0
 800234e:	d023      	beq.n	8002398 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b80      	cmp	r3, #128	; 0x80
 8002354:	d020      	beq.n	8002398 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2b40      	cmp	r3, #64	; 0x40
 800235a:	d01d      	beq.n	8002398 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0308 	and.w	r3, r3, #8
 8002366:	2b08      	cmp	r3, #8
 8002368:	d116      	bne.n	8002398 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800236a:	2300      	movs	r3, #0
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002380:	68f8      	ldr	r0, [r7, #12]
 8002382:	f000 f856 	bl	8002432 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2208      	movs	r2, #8
 800238a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e00f      	b.n	80023b8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	4013      	ands	r3, r2
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	bf0c      	ite	eq
 80023a8:	2301      	moveq	r3, #1
 80023aa:	2300      	movne	r3, #0
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	461a      	mov	r2, r3
 80023b0:	79fb      	ldrb	r3, [r7, #7]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d0b4      	beq.n	8002320 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	4613      	mov	r3, r2
 80023cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	88fa      	ldrh	r2, [r7, #6]
 80023d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	88fa      	ldrh	r2, [r7, #6]
 80023de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2222      	movs	r2, #34	; 0x22
 80023ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	691b      	ldr	r3, [r3, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d007      	beq.n	8002406 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002404:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f042 0220 	orr.w	r2, r2, #32
 8002424:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002426:	2300      	movs	r3, #0
}
 8002428:	4618      	mov	r0, r3
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002432:	b480      	push	{r7}
 8002434:	b095      	sub	sp, #84	; 0x54
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	330c      	adds	r3, #12
 8002440:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002442:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002444:	e853 3f00 	ldrex	r3, [r3]
 8002448:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800244a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002450:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	330c      	adds	r3, #12
 8002458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800245a:	643a      	str	r2, [r7, #64]	; 0x40
 800245c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002460:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002462:	e841 2300 	strex	r3, r2, [r1]
 8002466:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1e5      	bne.n	800243a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	3314      	adds	r3, #20
 8002474:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	e853 3f00 	ldrex	r3, [r3]
 800247c:	61fb      	str	r3, [r7, #28]
   return(result);
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	64bb      	str	r3, [r7, #72]	; 0x48
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	3314      	adds	r3, #20
 800248c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800248e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002492:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002494:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002496:	e841 2300 	strex	r3, r2, [r1]
 800249a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1e5      	bne.n	800246e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d119      	bne.n	80024de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	330c      	adds	r3, #12
 80024b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	e853 3f00 	ldrex	r3, [r3]
 80024b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	f023 0310 	bic.w	r3, r3, #16
 80024c0:	647b      	str	r3, [r7, #68]	; 0x44
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	330c      	adds	r3, #12
 80024c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80024ca:	61ba      	str	r2, [r7, #24]
 80024cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ce:	6979      	ldr	r1, [r7, #20]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	e841 2300 	strex	r3, r2, [r1]
 80024d6:	613b      	str	r3, [r7, #16]
   return(result);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1e5      	bne.n	80024aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024ec:	bf00      	nop
 80024ee:	3754      	adds	r7, #84	; 0x54
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	b084      	sub	sp, #16
 80024fa:	af00      	add	r7, sp, #0
 80024fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002510:	68f8      	ldr	r0, [r7, #12]
 8002512:	f7ff fee8 	bl	80022e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002516:	bf00      	nop
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800251e:	b480      	push	{r7}
 8002520:	b085      	sub	sp, #20
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b21      	cmp	r3, #33	; 0x21
 8002530:	d13e      	bne.n	80025b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253a:	d114      	bne.n	8002566 <UART_Transmit_IT+0x48>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d110      	bne.n	8002566 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6a1b      	ldr	r3, [r3, #32]
 8002548:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002558:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	1c9a      	adds	r2, r3, #2
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	621a      	str	r2, [r3, #32]
 8002564:	e008      	b.n	8002578 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	1c59      	adds	r1, r3, #1
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6211      	str	r1, [r2, #32]
 8002570:	781a      	ldrb	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29b      	uxth	r3, r3
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	4619      	mov	r1, r3
 8002586:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10f      	bne.n	80025ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800259a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68da      	ldr	r2, [r3, #12]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80025b0:	2302      	movs	r3, #2
  }
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68da      	ldr	r2, [r3, #12]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f7ff fe79 	bl	80022d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b22      	cmp	r3, #34	; 0x22
 80025fe:	f040 80ae 	bne.w	800275e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260a:	d117      	bne.n	800263c <UART_Receive_IT+0x50>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d113      	bne.n	800263c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002614:	2300      	movs	r3, #0
 8002616:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	b29b      	uxth	r3, r3
 8002626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800262a:	b29a      	uxth	r2, r3
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	1c9a      	adds	r2, r3, #2
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	629a      	str	r2, [r3, #40]	; 0x28
 800263a:	e026      	b.n	800268a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002640:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002642:	2300      	movs	r3, #0
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800264e:	d007      	beq.n	8002660 <UART_Receive_IT+0x74>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d10a      	bne.n	800266e <UART_Receive_IT+0x82>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d106      	bne.n	800266e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	b2da      	uxtb	r2, r3
 8002668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266a:	701a      	strb	r2, [r3, #0]
 800266c:	e008      	b.n	8002680 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800267a:	b2da      	uxtb	r2, r3
 800267c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800267e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800268e:	b29b      	uxth	r3, r3
 8002690:	3b01      	subs	r3, #1
 8002692:	b29b      	uxth	r3, r3
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	4619      	mov	r1, r3
 8002698:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800269a:	2b00      	cmp	r3, #0
 800269c:	d15d      	bne.n	800275a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68da      	ldr	r2, [r3, #12]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0220 	bic.w	r2, r2, #32
 80026ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026bc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d135      	bne.n	8002750 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	330c      	adds	r3, #12
 80026f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	e853 3f00 	ldrex	r3, [r3]
 80026f8:	613b      	str	r3, [r7, #16]
   return(result);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	f023 0310 	bic.w	r3, r3, #16
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	330c      	adds	r3, #12
 8002708:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270a:	623a      	str	r2, [r7, #32]
 800270c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800270e:	69f9      	ldr	r1, [r7, #28]
 8002710:	6a3a      	ldr	r2, [r7, #32]
 8002712:	e841 2300 	strex	r3, r2, [r1]
 8002716:	61bb      	str	r3, [r7, #24]
   return(result);
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e5      	bne.n	80026ea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b10      	cmp	r3, #16
 800272a:	d10a      	bne.n	8002742 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800272c:	2300      	movs	r3, #0
 800272e:	60fb      	str	r3, [r7, #12]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002746:	4619      	mov	r1, r3
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff fdd5 	bl	80022f8 <HAL_UARTEx_RxEventCallback>
 800274e:	e002      	b.n	8002756 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7fd fcfb 	bl	800014c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002756:	2300      	movs	r3, #0
 8002758:	e002      	b.n	8002760 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
  }
}
 8002760:	4618      	mov	r0, r3
 8002762:	3730      	adds	r7, #48	; 0x30
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	431a      	orrs	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	4313      	orrs	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80027a2:	f023 030c 	bic.w	r3, r3, #12
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6812      	ldr	r2, [r2, #0]
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	430b      	orrs	r3, r1
 80027ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699a      	ldr	r2, [r3, #24]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	430a      	orrs	r2, r1
 80027c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a2c      	ldr	r2, [pc, #176]	; (800287c <UART_SetConfig+0x114>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d103      	bne.n	80027d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80027d0:	f7ff f906 	bl	80019e0 <HAL_RCC_GetPCLK2Freq>
 80027d4:	60f8      	str	r0, [r7, #12]
 80027d6:	e002      	b.n	80027de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80027d8:	f7ff f8ee 	bl	80019b8 <HAL_RCC_GetPCLK1Freq>
 80027dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009a      	lsls	r2, r3, #2
 80027e8:	441a      	add	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f4:	4a22      	ldr	r2, [pc, #136]	; (8002880 <UART_SetConfig+0x118>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	0119      	lsls	r1, r3, #4
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009a      	lsls	r2, r3, #2
 8002808:	441a      	add	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	fbb2 f2f3 	udiv	r2, r2, r3
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <UART_SetConfig+0x118>)
 8002816:	fba3 0302 	umull	r0, r3, r3, r2
 800281a:	095b      	lsrs	r3, r3, #5
 800281c:	2064      	movs	r0, #100	; 0x64
 800281e:	fb00 f303 	mul.w	r3, r0, r3
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	011b      	lsls	r3, r3, #4
 8002826:	3332      	adds	r3, #50	; 0x32
 8002828:	4a15      	ldr	r2, [pc, #84]	; (8002880 <UART_SetConfig+0x118>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	095b      	lsrs	r3, r3, #5
 8002830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002834:	4419      	add	r1, r3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4613      	mov	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	009a      	lsls	r2, r3, #2
 8002840:	441a      	add	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	fbb2 f2f3 	udiv	r2, r2, r3
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <UART_SetConfig+0x118>)
 800284e:	fba3 0302 	umull	r0, r3, r3, r2
 8002852:	095b      	lsrs	r3, r3, #5
 8002854:	2064      	movs	r0, #100	; 0x64
 8002856:	fb00 f303 	mul.w	r3, r0, r3
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	011b      	lsls	r3, r3, #4
 800285e:	3332      	adds	r3, #50	; 0x32
 8002860:	4a07      	ldr	r2, [pc, #28]	; (8002880 <UART_SetConfig+0x118>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	095b      	lsrs	r3, r3, #5
 8002868:	f003 020f 	and.w	r2, r3, #15
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	440a      	add	r2, r1
 8002872:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002874:	bf00      	nop
 8002876:	3710      	adds	r7, #16
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40013800 	.word	0x40013800
 8002880:	51eb851f 	.word	0x51eb851f

08002884 <__libc_init_array>:
 8002884:	b570      	push	{r4, r5, r6, lr}
 8002886:	2600      	movs	r6, #0
 8002888:	4d0c      	ldr	r5, [pc, #48]	; (80028bc <__libc_init_array+0x38>)
 800288a:	4c0d      	ldr	r4, [pc, #52]	; (80028c0 <__libc_init_array+0x3c>)
 800288c:	1b64      	subs	r4, r4, r5
 800288e:	10a4      	asrs	r4, r4, #2
 8002890:	42a6      	cmp	r6, r4
 8002892:	d109      	bne.n	80028a8 <__libc_init_array+0x24>
 8002894:	f000 f822 	bl	80028dc <_init>
 8002898:	2600      	movs	r6, #0
 800289a:	4d0a      	ldr	r5, [pc, #40]	; (80028c4 <__libc_init_array+0x40>)
 800289c:	4c0a      	ldr	r4, [pc, #40]	; (80028c8 <__libc_init_array+0x44>)
 800289e:	1b64      	subs	r4, r4, r5
 80028a0:	10a4      	asrs	r4, r4, #2
 80028a2:	42a6      	cmp	r6, r4
 80028a4:	d105      	bne.n	80028b2 <__libc_init_array+0x2e>
 80028a6:	bd70      	pop	{r4, r5, r6, pc}
 80028a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80028ac:	4798      	blx	r3
 80028ae:	3601      	adds	r6, #1
 80028b0:	e7ee      	b.n	8002890 <__libc_init_array+0xc>
 80028b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80028b6:	4798      	blx	r3
 80028b8:	3601      	adds	r6, #1
 80028ba:	e7f2      	b.n	80028a2 <__libc_init_array+0x1e>
 80028bc:	08002920 	.word	0x08002920
 80028c0:	08002920 	.word	0x08002920
 80028c4:	08002920 	.word	0x08002920
 80028c8:	08002924 	.word	0x08002924

080028cc <memset>:
 80028cc:	4603      	mov	r3, r0
 80028ce:	4402      	add	r2, r0
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d100      	bne.n	80028d6 <memset+0xa>
 80028d4:	4770      	bx	lr
 80028d6:	f803 1b01 	strb.w	r1, [r3], #1
 80028da:	e7f9      	b.n	80028d0 <memset+0x4>

080028dc <_init>:
 80028dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028de:	bf00      	nop
 80028e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028e2:	bc08      	pop	{r3}
 80028e4:	469e      	mov	lr, r3
 80028e6:	4770      	bx	lr

080028e8 <_fini>:
 80028e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ea:	bf00      	nop
 80028ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ee:	bc08      	pop	{r3}
 80028f0:	469e      	mov	lr, r3
 80028f2:	4770      	bx	lr
